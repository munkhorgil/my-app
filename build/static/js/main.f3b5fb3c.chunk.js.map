{"version":3,"sources":["Comments.js","Header.js","util.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Comments","loading","items","Spinner","animation","role","className","length","map","item","Date","createdAt","toDateString","comment","name","Header","playing","url","onType","onSubmit","handleUrl","e","target","value","handleSubmit","placeholder","type","onChange","Button","variant","onClick","height","getComments","videoId","a","sendRequest","response","data","comments","snippet","topLevelComment","push","publishedAt","avatar","authorProfileImageUrl","authorDisplayName","textOriginal","axios","method","params","key","part","textForm","maxResults","App","useState","setComments","setUrl","setPlaying","setLoading","currentSong","setCurrentSong","React","useEffect","result","fetch","str","RegExp","test","alert","split","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3b5fb3c.chunk.js","sourcesContent":["import React from \"react\";\nimport Spinner from \"react-bootstrap/esm/Spinner\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div``;\n\nexport default function Comments({ loading, items = [] }) {\n  if (loading) {\n    return (\n      <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    );\n  }\n\n  if (items.length === 0) {\n    return null;\n  }\n\n  const renderItem = (item) => (\n    <div className=\"content\">\n      <small>{new Date(item.createdAt).toDateString()}</small>\n      <p>{item.comment}</p>\n      <cite>~{item.name}</cite>\n    </div>\n  );\n\n  return <Wrapper>{items.map(renderItem)}</Wrapper>;\n}\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport ReactPlayer from \"react-player\";\n\nexport default function Header({ playing, url, onType, onSubmit }) {\n  const handleUrl = (e) => {\n    return onType(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    return onSubmit();\n  };\n\n  function renderInput() {\n    return (\n      <div className=\"control\">\n        <input\n          placeholder=\"Enter Youtube URL\"\n          type=\"text\"\n          onChange={handleUrl}\n        />\n        <Button variant=\"secondary\" onClick={handleSubmit}>\n          Search and Play\n        </Button>\n      </div>\n    );\n  }\n\n  function renderPlayer() {\n    return <ReactPlayer playing={playing} url={url} height={0} />;\n  }\n\n  function renderAbout() {\n    return (\n      <p>\n        I often find myself engaging with people's comments on beautiful songs\n        while listening. I sit quietly and think. Try to listen to your\n        favourite music and read it's comments.\n      </p>\n    );\n  }\n\n  return (\n    <div>\n      {renderAbout()}\n      {renderInput()}\n      {renderPlayer()}\n    </div>\n  );\n}\n","import axios from 'axios';\n\nconst URL = 'https://www.googleapis.com/youtube/v3/commentThreads';\nconst API_KEY = 'AIzaSyAsyThfvOStT7v4WNZSEvKW854N03qr6KM'\n\n/**\n * Get comments of given videoId\n * @param {String} videoId\n */\nexport const getComments = async (videoId) => {\n  const response = await sendRequest(videoId);\n  const { data = {} } = response;\n  const { items = [] } = data;\n\n  if (items.length === 0) {\n    return [];\n  }\n\n  const comments = [];\n\n  for (const item of items) {\n    const { snippet } = item.snippet.topLevelComment;\n\n    comments.push({\n      createdAt: snippet.publishedAt,\n      avatar: snippet.authorProfileImageUrl,\n      name: snippet.authorDisplayName,\n      comment: snippet.textOriginal\n    });\n  }\n\n  return comments\n};\n\n/**\n * Send request to Youtube\n * @param {String} videoId \n * @returns {Promise} comments of video\n */\nconst sendRequest = async (videoId) => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: URL,\n      params: {\n        key: API_KEY,\n        videoId,\n        part: 'snippet',\n        textForm: 'plainText',\n        maxResults: 100,\n      }\n    });\n\n    return response;\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const validURL = (str) => {\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return !!pattern.test(str);\n}","import React, { useState } from \"react\";\nimport Comments from \"./Comments\";\nimport Header from \"./Header\";\nimport { getComments, validURL } from \"./util\";\n\nfunction App() {\n  const [comments, setComments] = useState([]);\n  const [url, setUrl] = useState(\"\");\n  const [playing, setPlaying] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const [currentSong, setCurrentSong] = useState(\"\");\n\n  React.useEffect(() => {\n    const fetch = async () => {\n      setLoading(true);\n\n      const result = await getComments(currentSong);\n\n      setComments(result);\n      setLoading(false);\n    };\n\n    if (currentSong) {\n      fetch();\n    }\n  }, [currentSong]);\n\n  const handleSubmit = () => {\n    if (url.length === 0 || !validURL(url)) {\n      return alert(\"Please enter a valid URL\");\n    }\n\n    const videoId = url.split(\"v=\")[1];\n\n    setCurrentSong(videoId);\n    setPlaying(true);\n  };\n\n  const handleType = (value) => {\n    return setUrl(value);\n  };\n\n  return (\n    <section className=\"wrapper\">\n      <h1>Late Night Vibes</h1>\n      <Header\n        url={url}\n        playing={playing}\n        onType={handleType}\n        onSubmit={handleSubmit}\n      />\n      <div className=\"contact\">\n        <small>Get in touch: info@latenightvibes.club</small>\n      </div>\n      <Comments loading={loading} items={comments} />\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}