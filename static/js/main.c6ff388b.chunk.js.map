{"version":3,"sources":["Comments.js","Header.js","util.js","Player.js","Sounds.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Comments","loading","items","Spinner","animation","role","className","length","map","item","idx","key","Date","createdAt","toDateString","comment","name","Header","playing","url","onType","onSubmit","handleUrl","e","target","value","handleSubmit","style","marginBottom","href","rel","src","alt","height","width","marginTop","placeholder","type","onChange","Button","variant","onClick","sort","a","b","likeCount","getComments","videoId","sendRequest","response","data","comments","snippet","topLevelComment","push","publishedAt","avatar","authorProfileImageUrl","authorDisplayName","textOriginal","axios","method","params","part","textForm","maxResults","Player","icon","useState","setPlaying","volume","setVolume","process","loop","min","max","step","defaultValue","handleStyle","styles","trackStyle","railStyle","backgroundColor","borderColor","buttons","Sounds","props","button","App","setComments","setUrl","setLoading","currentSong","setCurrentSong","React","useEffect","result","fetch","str","RegExp","test","alert","split","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6ff388b.chunk.js","sourcesContent":["import React from \"react\";\nimport Spinner from \"react-bootstrap/esm/Spinner\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div``;\n\nexport default function Comments({ loading, items = [] }) {\n  if (loading) {\n    return (\n      <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    );\n  }\n\n  if (items.length === 0) {\n    return null;\n  }\n\n  const renderItem = (item, idx) => (\n    <div key={idx} className=\"content\">\n      <small>{new Date(item.createdAt).toDateString()}</small>\n      <p>{item.comment}</p>\n      <cite>~{item.name}</cite>\n    </div>\n  );\n\n  return <Wrapper>{items.map(renderItem)}</Wrapper>;\n}\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport ReactPlayer from \"react-player\";\n\nexport default function Header({ playing, url, onType, onSubmit }) {\n  const handleUrl = (e) => {\n    return onType(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    return onSubmit();\n  };\n\n  function renderInput() {\n    return (\n      <div style={{ marginBottom: 20 }}>\n        <input\n          placeholder=\"Enter Youtube URL\"\n          type=\"text\"\n          onChange={handleUrl}\n        />\n        <Button variant=\"secondary\" onClick={handleSubmit}>\n          Submit\n        </Button>\n      </div>\n    );\n  }\n\n  function renderPlayer() {\n    return <ReactPlayer playing={playing} url={url} height={0} />;\n  }\n\n  function renderAbout() {\n    return (\n      <>\n        <p>\n          I often find myself engaging with people's comments on beautiful songs\n          while listening. Try to listen to your favourite music and read it's\n          comments.\n        </p>\n      </>\n    );\n  }\n\n  function renderDonate() {\n    return (\n      <div style={{ marginBottom: 30 }}>\n        <a\n          href=\"https://www.buymeacoffee.com/munkhorgil\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          <img\n            src=\"https://cdn.buymeacoffee.com/buttons/v2/default-orange.png\"\n            alt=\"Buy Me A Coffee\"\n            style={{ height: 40, width: 140 }}\n          />\n        </a>\n        \n        <h5 style={{ marginTop: 16 }}>I'm always open for a chat <a href = \"mailto: info@latenightvibes.club\">Email</a></h5>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {renderAbout()}\n      {renderDonate()}\n      {renderInput()}\n      {renderPlayer()}\n    </div>\n  );\n}\n","import axios from 'axios';\n\nconst URL = 'https://www.googleapis.com/youtube/v3/commentThreads';\nconst API_KEY = 'AIzaSyAsyThfvOStT7v4WNZSEvKW854N03qr6KM'\n\nconst sort = (a, b) => {\n  return a.likeCount < b.likeCount ? 1 : a.likeCount > b.likeCount ? -1 : 0;\n};\n\n/**\n * Get comments of given videoId\n * @param {String} videoId\n */\nexport const getComments = async (videoId) => {\n  const response = await sendRequest(videoId);\n  const { data = {} } = response;\n  const { items = [] } = data;\n\n  if (items.length === 0) {\n    return [];\n  }\n\n  const comments = [];\n\n  for (const item of items) {\n    const { snippet } = item.snippet.topLevelComment;\n\n    comments.push({\n      createdAt: snippet.publishedAt,\n      avatar: snippet.authorProfileImageUrl,\n      name: snippet.authorDisplayName,\n      comment: snippet.textOriginal,\n      likeCount: snippet.likeCount\n    });\n  }\n\n  return comments.sort(sort);\n};\n\n/**\n * Send request to Youtube\n * @param {String} videoId \n * @returns {Promise} comments of video\n */\nconst sendRequest = async (videoId) => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: URL,\n      params: {\n        key: API_KEY,\n        videoId,\n        part: 'snippet',\n        textForm: 'plainText',\n        maxResults: 100,\n      }\n    });\n\n    return response;\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const validURL = (str) => {\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return !!pattern.test(str);\n}","import React, { useState } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nexport default function Player({ url, icon }) {\n  const [playing, setPlaying] = useState(false);\n  const [volume, setVolume] = useState(0.5);\n\n  const handleClick = () => setPlaying(!playing);\n  const handleChange = (value) => setVolume(value);\n\n  return (\n    <div>\n      <div\n        className={playing ? \"button-active\" : \"button\"}\n        onClick={handleClick}\n      >\n        <div className=\"icon-btn\">\n          <img\n            alt=\"alt\"\n            src={process.env.PUBLIC_URL + `${icon}`}\n            className={playing ? \"icon-active\" : \"icon\"}\n          />\n        </div>\n        <ReactPlayer\n          url={url}\n          playing={playing}\n          loop={true}\n          volume={volume}\n          height={0}\n          width={0}\n        />\n      </div>\n      <div className=\"slider\">\n        <Slider\n          min={0}\n          max={1}\n          step={0.1}\n          defaultValue={volume}\n          onChange={handleChange}\n          handleStyle={styles.handleStyle}\n          trackStyle={styles.trackStyle}\n          railStyle={styles.railStyle}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  handleStyle: {\n    backgroundColor: \"gray\",\n    borderColor: \"white\",\n  },\n  trackStyle: {\n    backgroundColor: \"#9B5A4F\",\n  },\n  railStyle: {\n    backgroundColor: \"#D0CDCD\",\n  },\n};\n","import React from 'react';\nimport Player from './Player';\n\nconst buttons = [\n  {\n    icon: '/rain.png',\n    url: 'https://www.youtube.com/watch?v=74b3Zb18UDM'\n  },\n  {\n    icon: '/bird.png',\n    url: 'https://www.youtube.com/watch?v=Qm846KdZN_c'\n  },\n  {\n    icon: '/bonfire.png',\n    url: 'https://www.youtube.com/watch?v=NUKKzdVy0EI'\n  },\n  {\n    icon: '/ocean.png',\n    url: 'https://www.youtube.com/watch?v=nPit8KqqFwI'\n  },\n]\n\nexport default function Sounds(props)  {\n  const renderItem = (button, idx) => {\n    return <Player key={idx} icon={button.icon} url={button.url} />\n  };\n\n  return (\n    <div className=\"buttonWrapper\">\n      {buttons.map(renderItem)}\n    </div>\n  )\n}","import React, { useState } from \"react\";\nimport Comments from \"./Comments\";\nimport Header from \"./Header\";\nimport { getComments, validURL } from \"./util\";\nimport Sounds from \"./Sounds\";\n\nfunction App() {\n  const [comments, setComments] = useState([]);\n  const [url, setUrl] = useState(\"\");\n  const [playing, setPlaying] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const [currentSong, setCurrentSong] = useState(\"\");\n\n  React.useEffect(() => {\n    const fetch = async () => {\n      setLoading(true);\n\n      const result = await getComments(currentSong);\n\n      setComments(result);\n      setLoading(false);\n    };\n\n    if (currentSong) {\n      fetch();\n    }\n  }, [currentSong]);\n\n  const handleSubmit = () => {\n    if (url.length === 0 || !validURL(url)) {\n      return alert(\"Please enter a valid URL\");\n    }\n\n    const videoId = url.split(\"v=\")[1];\n\n    setCurrentSong(videoId);\n    setPlaying(true);\n  };\n\n  const handleType = (value) => {\n    return setUrl(value);\n  };\n\n  return (\n    <section className=\"wrapper\">\n      <h1>Late Night Vibes</h1>\n      <Header\n        url={url}\n        playing={playing}\n        onType={handleType}\n        onSubmit={handleSubmit}\n      />\n      <Sounds />\n      <div className=\"tabWrapper\">\n        <Comments loading={loading} items={comments} />\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}